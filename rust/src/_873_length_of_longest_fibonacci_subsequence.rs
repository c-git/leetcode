//! Solution for https://leetcode.com/problems/length-of-longest-fibonacci-subsequence
//! 873. Length of Longest Fibonacci Subsequence

use std::{cmp::Ordering, collections::BTreeMap};

#[derive(Clone, Copy)]
struct PrevSeq {
    last_value: i32,
    length: i32,
}

impl Solution {
    pub fn len_longest_fib_subseq(arr: Vec<i32>) -> i32 {
        let mut result = 0;

        // Only store sequences of 3 or more
        let mut prev_sequences: BTreeMap<i32, Vec<PrevSeq>> = BTreeMap::new();

        for (i, &value) in arr.iter().enumerate().skip(2) {
            if let Some(prev_list) = prev_sequences.remove(&value) {
                for prev in prev_list {
                    let next = prev.last_value + value;
                    let candidate = PrevSeq {
                        last_value: value,
                        length: prev.length + 1,
                    };
                    result = result.max(candidate.length);
                    add_candidate(&mut prev_sequences, next, candidate);
                }
            }

            // Check for any previous length 2 chains this value can extend
            for (left_idx, left) in arr.iter().enumerate().take(i - 1) {
                if left + arr[left_idx + 1] > value {
                    // Already too big stop now
                    break;
                }
                for right in &arr[left_idx + 1..i] {
                    let sum = left + right;
                    match sum.cmp(&value) {
                        Ordering::Less => {}
                        Ordering::Equal => {
                            add_candidate(
                                &mut prev_sequences,
                                right + value,
                                PrevSeq {
                                    last_value: value,
                                    length: 3,
                                },
                            );
                            result = result.max(3);
                            break;
                        }
                        Ordering::Greater => break,
                    }
                }
            }
        }
        result
    }
}

fn add_candidate(prev_sequences: &mut BTreeMap<i32, Vec<PrevSeq>>, key: i32, value: PrevSeq) {
    prev_sequences
        .entry(key)
        .and_modify(|curr_list| {
            curr_list.push(value);
        })
        .or_insert(vec![value]);
}

// << ---------------- Code below here is only for local use ---------------- >>

pub struct Solution;

#[cfg(test)]
mod tests {
    use super::*;

    use rstest::rstest;

    #[rstest]
    #[case(vec![1,2,3,4,5,6,7,8], 5)]
    #[case(vec![1,3,7,11,12,14,18], 3)]
    #[case(vec![2,4,7,8,9,10,14,15,18,23,32,50], 5)]
    #[case(vec![11,14,15,16,32,57,74,77,91,125,149,160,184,187,194,195,203,222,229,247,259,282,305,311,323,332,335,336,338,352,361,379,390,396,413,424,457,459,468,511,530,542,552,561,574,593,595,599,604,633,640,643,648,652,657,661,690,695,696,728,741,748,752,789,838,846,875,888,896,900,910,917,926,931,949,953,959,980,981,983,1010,1039,1042,1094,1151,1200,1207,1246,1264,1265,1281,1282,1330,1348,1404,1405,1427,1457,1509,1526,1527,1533,1552,1576,1616,1622,1682,1732,1791,1926,1929,1930,1941,1994,2034,2035,2044,2053,2153,2223,2247,2302,2353,2371,2384,2419,2457,2480,2504,2548,2559,2562,2721,2774,2911,2942,3088,3141,3191,3210,3260,3281,3316,3392,3487,3558,3577,3729,3788,3810,3904,3928,3983,4007,4114,4120,4135,4170,4403,4506,4733,4841,5082,5117,5139,5313,5316,5350,5436,5710,5711,5824,6031,6163,6172,6275,6347,6440,6487,6624,6676,6694,6718,7124,7280,7675,7752,8170,8223,8308,8349,8573,8597,8666,8828,9197,9269,9401,9760,9960,9973,10179,10275,10423,10494,10744,10790,10829,10888,11527,11786,12408,12593,13252,13305,13425,13488,13886,13913,14016,14264,14907,14980,15225,15791,16132,16136,16454,16622,16863,16981,17368,17466,17523,17606,18651,19066,20083,20345,21422,21528,21733,21837,22459,22510,22682,23092,24104,24249,24626,25551,26092,26109,26633,26897,27286,27475,28112,28256,28352,28494,30178,30852,32491,32938,34674,34833,35158,35325,36345,36423,36698,37356,39011,39229,39851,41342,42224,42245,43087,43519,44149,44456,45480,45722,45875,46100,48829,49918,52574,53283,56096,56361,56891,57162,58804,58933,59380,60448,63115,63478,64477,66893,68316,68354,69720,70416,71435,71931,73592,73978,74227,74594,79007,80770,85065,86221,90770,91194,92049,92487,95149,95356,96078,97804,102126,102707,104328,108235,110540,110599,112807,113935,115584,116387,119072,119700,120102,120694,127836,130688,137639,139504,146866,147555,148940,149649,153953,154289,155458,158252,165241,166185,168805,175128,178856,178953,182527,184351,187019,188318,192664,193678,194329,195288,206843,211458,222704,225725,237636,238749,240989,242136,249102,249645,251536,256056,267367,268892,273133,283363,289396,289552,295334,298286,302603,304705,311736,313378,314431,315982,334679,342146,360343,365229,384502,386304,389929,391785,403055,403934,406994,414308,432608,435077,441938,458491,468252,468505,477861,482637,489622,493023,504400,507056,508760,511270,541522,553604,583047,590954,622138,625053,630918,633921,652157,653579,658530,670364,699975,703969,715071,741854,757648,758057,773195,780923,792225,797728,816136,820434,823191,827252,876201,895750,943390,956183,1006640,1011357,1020847,1025706,1055212,1057513,1065524,1084672,1132583,1139046,1157009,1200345,1225900,1226562,1251056,1263560,1281847,1290751,1320536,1327490,1331951,1338522,1417723,1449354,1526437,1547137,1628778,1636410,1651765,1659627,1707369,1711092,1724054,1755036,1832558,1843015,1872080,1942199,1983548,1984619,2024251,2044483,2074072,2088479,2136672,2147924,2155142,2165774,2293924,2345104,2469827,2503320,2635418,2647767,2672612,2685333,2762581,2768605,2789578,2839708,2965141,2982061,3029089,3142544,3209448,3211181,3275307,3308043,3355919,3379230,3457208,3475414,3487093,3504296,3711647,3794458,3996264,4050457,4264196,4284177,4324377,4344960,4469950,4479697,4513632,4594744,4797699,4825076,4901169,5084743,5192996,5195800,5299558,5352526,5429991,5467709,5593880,5623338,5642235,5670070,6005571,6139562,6466091,6553777,6899614,6931944,6996989,7030293,7232531,7248302,7303210,7434452,7762840,7807137,7930258,8227287,8402444,8406981,8574865,8660569,8785910,8846939,9051088,9098752,9129328,9174366,9717218,9934020,10462355,10604234,11163810,11216121,11321366,11375253,11702481,11727999,11816842,12029196,12560539,12632213,12831427,13312030,13595440,13602781,13874423,14013095,14215901,14314648,14644968,14722090,14771563,14844436,15722789,16073582,16928446,17158011,18063424,18148065,18318355,18405546,18935012,18976301,19120052,19463648,20323379,20439350,20761685,21539317,21997884,22009762,22449288,22673664,23001811,23161587,23696056,23820842,23900891,24018802,25440007,26007602,27390801,27762245,29227234,29364186,29639721,29780799,30637493,30704300,30936894,31492844,32883918,33071563,33593112,34851347,35593324,35612543,36323711,36686759,37217712,37476235,38341024,38542932,38672454,38863238,41162796,42081184,44319247,44920256,47290658,47512251,47958076,48186345,49572505,49680601,50056946,50956492,53207297,53510913,54354797,56390664,57591208,57622305,58772999,59360423,60219523,60637822,62037080,62363774,62573345,62882040,66602803,68088786,71710048,72682501,76517892,76876437,77597797,77967144,80209998,80384901,80993840,82449336,86091215,86582476,87947909,91242011,93184532,93234848,95096710,96047182,97437235,98114057,100378104,100906706,101245799,101745278,107765599,110169970,116029295,117602757,123808550,124388688,125555873,126153489,129782503,130065502,131050786,133405828,139298512,140093389,142302706,147632675,150775740,150857153,153869709,155407605,157656758,158751879,162415184,163270480,163819144,164627318,174368402,178258756,187739343,190285258,200326442,201265125,203153670,204120633,209992501,210450403,212044626,215855164,225389727,226675865,230250615,238874686,243960272,244092001,248966419,251454787,255093993,256865936,262793288,264177186,265064943,266372596,282134001,288428726,303768638,307888015,324134992,325653813,328709543,330274122,339775004,340515905,343095412,349260992,364688239,366769254,372553321,386507361,394736012,394949154,402836128,406862392,412750751,415617815,425208472,427447666,428884087,430999914,456502403,466687482,491507981,498173273,524461434,526918938,531863213,534394755,549767505,550966308,555140038,565116156,590077966,593445119,602803936,625382047,638696284,639041155,651802547,658317179,667844744,672483751,688001760,691624852,693949030,697372510,738636404,755116208,795276619,806061288,848596426,852572751,860572756,864668877,889542509,891482213,898235450,914377148,954766205,960214373,975357257], 34)]
    fn case(#[case] arr: Vec<i32>, #[case] expected: i32) {
        let actual = Solution::len_longest_fib_subseq(arr);
        assert_eq!(actual, expected);
    }
}
